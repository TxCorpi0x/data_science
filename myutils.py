{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO0K2gpclhV1yORADrxmdIH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"yHETl3g_keKu"},"outputs":[],"source":["# if weight vector w is None then uses the clf for prediction\n","def plot_decision_boundary(clf, X, y, w = None):\n","    plot_step = 0.02\n","    plot_colors = \"rgb\"\n","    plt.scatter(X[y == 0][:, 0], X[y == 0][:, 1], color='b', label='0')\n","    plt.scatter(X[y == 1][:, 0], X[y == 1][:, 1], color='r', label='1')\n","    x_min, x_max = X[:, 0].min(), X[:, 0].max()\n","    y_min, y_max = X[:, 1].min(), X[:, 1].max()\n","    xx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step),\n","                         np.arange(y_min, y_max, plot_step))\n","    if w is None:\n","        Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n","        print(\"Using clf ...\")\n","    else:\n","        Z = np.dot(np.c_[np.ones(xx.ravel().size),xx.ravel(), yy.ravel()],w)\n","        print(\"Using w ...\")\n","\n","    Z = Z.reshape(xx.shape)\n","     \n","    plt.contour(xx, yy, Z, [0.5], linewidths=1, colors='black');"]}]}